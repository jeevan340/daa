1)#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


void insertAtBeginning(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = *head;
    *head = newNode;
}


void insertAtPosition(struct Node* prevNode, int value) {
    if (prevNode == NULL) {
        printf("Previous node cannot be NULL.\n");
        return;
    }
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = prevNode->next;
    prevNode->next = newNode;
}


void insertAtEnd(struct Node** head, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}


void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main() {
    struct Node* head = NULL;

    insertAtEnd(&head, 10); 
    insertAtBeginning(&head, 5);
    insertAtEnd(&head, 20); 
    insertAtPosition(head->next, 15); 

    printf("Linked List after insertions: ");
    printList(head);

    return 0;
}



Linked List after insertions: 5 10 15 20

--------------------------------
Process exited after 0.03227 seconds with return value 0
Press any key to continue . . .






2)#include <stdio.h>

#define N 8  // Change N to the desired board size

int board[N][N];

// Function to check if a queen can be placed at row, col
int isSafe(int row, int col) {
    int i, j;
    // Check the row on the left side
    for (i = 0; i < col; i++)
        if (board[row][i])
            return 0;

    // Check upper diagonal on the left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return 0;

    // Check lower diagonal on the left side
    for (i = row, j = col; i < N && j >= 0; i++, j--)
        if (board[i][j])
            return 0;

    return 1;
}

// Recursive function to solve N-Queens problem
int solveNQueens(int col) {
	int i,j;
    if (col >= N) {
        // Solution found, print the board
        
        for ( i = 0; i < N; i++) {
            for ( j = 0; j < N; j++) {
                printf("%d ", board[i][j]);
            }
            printf("\n");
        }
        printf("\n");
        return 1;
    }

    int count = 0;
    for ( i = 0; i < N; i++) {
        if (isSafe(i, col)) {
            board[i][col] = 1;
            count += solveNQueens(col + 1);
            board[i][col] = 0;  // Backtrack
        }
    }
    return count;
}

int main() {
    int solutions = solveNQueens(0);
    printf("Total solutions: %d\n", solutions);
    return 0;
}





0 0 0 1 0 0 0 0
0 1 0 0 0 0 0 0
0 0 0 0 0 0 1 0
0 0 1 0 0 0 0 0
0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 1
0 0 0 0 1 0 0 0
1 0 0 0 0 0 0 0

0 0 0 0 1 0 0 0
0 1 0 0 0 0 0 0
0 0 0 1 0 0 0 0
0 0 0 0 0 0 1 0
0 0 1 0 0 0 0 0
0 0 0 0 0 0 0 1
0 0 0 0 0 1 0 0
1 0 0 0 0 0 0 0

0 0 1 0 0 0 0 0
0 0 0 0 1 0 0 0
0 1 0 0 0 0 0 0
0 0 0 0 0 0 0 1
0 0 0 0 0 1 0 0
0 0 0 1 0 0 0 0
0 0 0 0 0 0 1 0
1 0 0 0 0 0 0 0

0 0 1 0 0 0 0 0
0 0 0 0 0 1 0 0
0 0 0 1 0 0 0 0
0 1 0 0 0 0 0 0
0 0 0 0 0 0 0 1
0 0 0 0 1 0 0 0
0 0 0 0 0 0 1 0
1 0 0 0 0 0 0 0

Total solutions: 92

--------------------------------
Process exited after 0.573 seconds with return value 0
Press any key to continue . . .






3)// C Program to find the sum of
// even-indices Fibonacci numbers
#include <stdio.h>
 

int calculateEvenSum(int n)
{

    if (n <= 0)
        return 0;
 
    int fibo[2 * n + 1];
    fibo[0] = 0, fibo[1] = 1;
 

    int sum = 0,i;
 

    for ( i = 2; i <= 2 * n; i++) {
        fibo[i] = fibo[i - 1] + fibo[i - 2];

        if (i % 2 == 0)
            sum += fibo[i];
    }

    return sum;
}
 

int main()
{
 
   
    int n;
 	printf("enter the number:");
 	scanf("%d",&n);
    
    
    int sum = calculateEvenSum(n);
 
    
    printf("Even indexed Fibonacci Sum upto %d terms = %d",
           n, sum);

}




enter the number:4
Even indexed Fibonacci Sum upto 4 terms = 33
--------------------------------
Process exited after 3.92 seconds with return value 44
Press any key to continue . . .






4)#include <stdio.h>
#include <stdlib.h>
int comparator(const void* p1, const void* p2)
{
    const int(*x)[3] = p1;
    const int(*y)[3] = p2;
 
    return (*x)[2] - (*y)[2];
}
void makeSet(int parent[], int rank[], int n)
{
	int i;
    for ( i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
}
int findParent(int parent[], int component)
{
    if (parent[component] == component)
        return component;
 
    return parent[component]
           = findParent(parent, parent[component]);
}
void unionSet(int u, int v, int parent[], int rank[], int n)
{
    u = findParent(parent, u);
    v = findParent(parent, v);
 
    if (rank[u] < rank[v]) {
        parent[u] = v;
    }
    else if (rank[u] > rank[v]) {
        parent[v] = u;
    }
    else {
        parent[v] = u;
        rank[u]++;
    }
}
void kruskalAlgo(int n, int edge[n][3])
{
    qsort(edge, n, sizeof(edge[0]), comparator);
    int parent[n],i;
    int rank[n];
    makeSet(parent, rank, n);
    int minCost = 0;
    printf("Following are the edges in the constructed MST\n");
    for ( i = 0; i < n; i++) {
        int v1 = findParent(parent, edge[i][0]);
        int v2 = findParent(parent, edge[i][1]);
        int wt = edge[i][2];
        if (v1 != v2) {
            unionSet(v1, v2, parent, rank, n);
            minCost += wt;
            printf("%d -- %d == %d\n", edge[i][0],
                   edge[i][1], wt);
        }
    }
    printf("Minimum Cost Spanning Tree: %d\n", minCost);
}
int main()
{
    int edge[5][3] = { { 0, 1, 10 },
                       { 0, 2, 6 },
                       { 0, 3, 5 },
                       { 1, 3, 15 },
                       { 2, 3, 4 } };
 
    kruskalAlgo(5, edge);
    return 0;
}



Following are the edges in the constructed MST
2 -- 3 == 4
0 -- 3 == 5
0 -- 1 == 10
Minimum Cost Spanning Tree: 19

--------------------------------
Process exited after 0.03136 seconds with return value 0
Press any key to continue . . .





5)#include <stdio.h>
#include <stdlib.h>

// Structure to represent an item
struct Item {
    int weight;
    int profit;
};

// Function to compare items based on their profit-to-weight ratio
int compareItems(const void *a, const void *b) {
    struct Item *itemA = (struct Item *)a;
    struct Item *itemB = (struct Item *)b;
    double ratioA = (double)itemA->profit / itemA->weight;
    double ratioB = (double)itemB->profit / itemB->weight;
    if (ratioA < ratioB)
        return 1;  // Sort in decreasing order of ratio
    else if (ratioA > ratioB)
        return -1;
    return 0;
}

// Function to solve the Knapsack problem using a greedy approach
double knapsackGreedy(int maxWeight, struct Item items[], int numItems) {
    // Sort items based on their profit-to-weight ratio
    qsort(items, numItems, sizeof(struct Item), compareItems);
    
    double totalProfit = 0;
    int currentWeight = 0,i;
    
    for ( i = 0; i < numItems; i++) {
        if (currentWeight + items[i].weight <= maxWeight) {
            currentWeight += items[i].weight;
            totalProfit += items[i].profit;
            printf("Added item with weight %d and profit %d\n", items[i].weight, items[i].profit);
        } else {
            int remainingWeight = maxWeight - currentWeight;
            totalProfit += (double)items[i].profit / items[i].weight * remainingWeight;
            printf("Added fraction of item with weight %d and profit %d\n", items[i].weight, items[i].profit);
            break;
        }
    }
    
    return totalProfit;
}

int main() {
    int knapsackWeight = 100;
    struct Item items[] = {
        {80, 70},
        {40, 30},
        {20, 50},
        {3, 80}
    };
    int numItems = sizeof(items) / sizeof(items[0]);
    
    double maxProfit = knapsackGreedy(knapsackWeight, items, numItems);
    
    printf("Maximum profit using greedy approach: %.2lf\n", maxProfit);
    
    return 0;
}





Added item with weight 3 and profit 80
Added item with weight 20 and profit 50
Added fraction of item with weight 80 and profit 70
Maximum profit using greedy approach: 197.38

--------------------------------
Process exited after 0.03278 seconds with return value 0
Press any key to continue . . .






6)#include<stdio.h>

/* Declaring an array, first element as low, and last element as high */

void quicksort(int array[25],int low,int high){

int x, y, p, temp;

if(low<high){

    p=low;

    x=low;

    y=high;

    while(x<y){

        while(array[x]<=array[p]&&x<high)

        x++;

            while(array[y]>array[p])

            y--;

            if(x<y){

                temp=array[x];

                array[x]=array[y];

                array[y]=temp;

            }

        }

        temp=array[p];

        array[p]=array[y];

        array[y]=temp;

        quicksort(array,low,y-1);

        quicksort(array,y+1,high);

    }

}

int main(){

    int x, count, array[25];

    printf("How many elements should the array have? (Max. - 25): ");

    scanf("%d",&count);

    printf("Enter %d elements for the array: ", count);

    for(x=0;x<count;x++)

        scanf("%d",&array[x]);

        quicksort(array,0,count-1);

    printf("After implementing quicksort the sorted order is: ");

    for(x=0;x<count;x++)

        printf(" %d",array[x]);

    return 0;

}



How many elements should the array have? (Max. - 25): 7
Enter 7 elements for the array: 10
5
80
-2
15
23
45
After implementing quicksort the sorted order is:  -2 5 10 15 23 45 80
--------------------------------
Process exited after 39.28 seconds with return value 0
Press any key to continue . . .




7)#include <stdio.h>
#include <string.h>

void reverseString(char *str) {
    int length = strlen(str),i;
    for ( i = length - 1; i >= 0; i--) {
        printf("%c", str[i]);
    }
    printf("\n");
}

int main() {
	int i;
    char test_cases[][20] = {"Y5mm/sa", "7yut02", "EryEq", "qEyrE"};

    for ( i = 0; i < 4; i++) {
        reverseString(test_cases[i]);
    }

    return 0;
}




as/mm5Y
20tuy7
qEyrE
EryEq

--------------------------------
Process exited after 0.03045 seconds with return value 0
Press any key to continue . . .





8)#include <stdio.h>
#include <time.h>

// Function to perform the Bubble Sort algorithm
void bubbleSort(int arr[], int n) {
    int temp,i,j;
    for ( i = 0; i < n - 1; i++) {
        for ( j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap arr[j] and arr[j+1]
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int n,i;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];

    // Input the elements from the user
    printf("Enter %d elements:\n", n);
    for ( i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Measure the execution time of Bubble Sort
    clock_t start = clock();
    bubbleSort(arr, n);
    clock_t end = clock();

    // Calculate the time taken in seconds
    double timeTaken = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("Sorted array:\n");
    for ( i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    printf("\nTime taken by Bubble Sort: %f seconds\n", timeTaken);

    return 0;
}





Enter the number of elements: 7
Enter 7 elements:
10
80
-2
15
45
23
5
Sorted array:
-2 5 10 15 23 45 80
Time taken by Bubble Sort: 0.000000 seconds

--------------------------------
Process exited after 27.33 seconds with return value 0
Press any key to continue . . .





